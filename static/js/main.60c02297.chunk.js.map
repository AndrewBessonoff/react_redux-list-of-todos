{"version":3,"sources":["store/index.ts","index.tsx"],"names":["initialState","message","loading","store","createStore","state","action","type","payload","composeWithDevTools","applyMiddleware","thunk","Root","ReactDOM","render","document","getElementById"],"mappings":"qNAyBMA,EAA0B,CAC9BC,QAAS,GACTC,SAAS,GAiDEC,EAAQC,uBA7CD,WAAsD,IAArDC,EAAoD,uDAA5CL,EAAcM,EAA8B,uCACvE,OAAQA,EAAOC,MAGb,IAAK,gBACH,OAAO,2BACFF,GADL,IAEEH,SAAS,IAGb,IAAK,iBAGH,MAAO,CACLA,SAAS,EACTD,QAASK,EAAOE,SAIpB,QACE,OAAOH,KA2BXI,8BACEC,0BAAgBC,O,OCtEdC,EAAO,kBACX,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SACE,cAAC,IAAD,OAMJU,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.60c02297.chunk.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\ntype StartLoadingAction = {\n  // we use a literal as a type so the type can't have any other value\n  type: 'START_LOADING',\n};\n\ntype FinishLoadingAction = {\n  type: 'FINISH_LOADING',\n  payload: string,\n};\n\n// Only the listed actions can be dispatched in the App\ntype Action = (\n  StartLoadingAction\n  | FinishLoadingAction\n);\n\ntype RootState = {\n  message: string;\n  loading: boolean;\n};\n\nconst initialState: RootState = {\n  message: '',\n  loading: false,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: Action): RootState => {\n  switch (action.type) {\n    // this is the second time we use this literal\n    // Later we will use Redux Toolkit to avoid such a duplication\n    case 'START_LOADING':\n      return {\n        ...state, // we copy the state to avoid mutations\n        loading: true,\n      };\n\n    case 'FINISH_LOADING':\n      // now we now that the action is of FinishLoadingAction type\n      // becase other possible Actions have different `type` values\n      return {\n        loading: false,\n        message: action.payload,\n      };\n\n    // we must return the current state if we don't know the action\n    default:\n      return state;\n  }\n};\n\n// Action creator returns an action object\nexport const actions = {\n  // the function return type gatantees that we can't mistype\n  startLoading: (): StartLoadingAction => ({\n    type: 'START_LOADING',\n  }),\n\n  finishLoading: (message: string): FinishLoadingAction => ({\n    type: 'FINISH_LOADING',\n    // the function return type forces us to add the `payload` property with a string\n    payload: message,\n  }),\n};\n\n// Selectors receive RootState from the `useSelector` hook and return required data\nexport const selectors = {\n  isLoading: (state: RootState) => state.loading,\n  getMessage: (state: RootState) => state.message,\n};\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools( // allows you to use https://github.com/reduxjs/redux-devtools/tree/main/extension#redux-devtools-extension\n    applyMiddleware(thunk),\n  ),\n);\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './store';\n// import { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      {/* <App /> */}\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}